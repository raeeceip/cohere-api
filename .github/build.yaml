name: Build and Release

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.8"

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit black mypy isort

      - name: Lint and type check
        run: |
          pre-commit run --all-files
          mypy src/

  build:
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build
        run: python build.py
        env:
          COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: commandr-${{ matrix.os }}
          path: |
            dist/
            !dist/**/*.pyc
            !dist/**/__pycache__

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/commandr-macos-latest/**/*
            artifacts/commandr-ubuntu-latest/**/*
            artifacts/commandr-windows-latest/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version
        run: |
          VERSION=$(echo ${{ github.ref }} | sed 's/refs\/tags\/v//')
          echo "{\"version\": \"$VERSION\"}" > version.json

      - name: Commit version update
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: update version to ${{ github.ref }}"
          file_pattern: version.json
